// Author: cvet
// Doors and keys stuff.
#include "_macros.fos"
#include "_msgstr.fos"

#include "doors.fos"

#define STR_FIRST_LOCKPICK				(981)
#define STR_LOCK_REMOVED				(982)
#define STR_NEED_SUPERTOOLKIT			(983)

bool UseItemOnLocker(Critter& cr, Item& locker, Item& item) // Export
{
	return true;
}

bool UseSkillOnLocker(Critter& cr, Item& locker, int skill) // Export
{
	Map@ map=cr.GetMap();
	if(not valid(map))
	{
		cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
		return true;
	}

	if(skill==SKILL_PICK_ON_GROUND)
	{
		if(locker.GetType()==ITEM_TYPE_DOOR)
		{
			// NoOpen
			if(FLAG(locker.LockerCondition,LOCKER_NOOPEN))
			{
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
				return true;
			}

			// Critter on hex
			if(FLAG(locker.LockerCondition,LOCKER_ISOPEN) && valid(map.GetCritter(locker.HexX,locker.HexY)))
			{
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
				return true;
			}

			// Check key
			if(!FLAG(locker.LockerCondition,LOCKER_ISOPEN) && locker.LockerId!=0 &&
				!FLAG(locker.LockerCondition,LOCKER_BROKEN) && !IsKeyAviable(cr,locker.LockerId))
			{
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_ITEM_LOCKER_NEED_KEY);
				cr.PlaySound(SOUND_DOOR,  SOUND_DOOR_LOCK, locker.Proto.SoundId, locker.Proto.SoundId, true);
				return true;
			}

			// Change state
			if(FLAG(locker.LockerCondition,LOCKER_ISOPEN)) 
			{
				cr.PlaySound(SOUND_DOOR,  SOUND_DOOR_CLOSE, locker.Proto.SoundId, locker.Proto.SoundId, true);
				locker.LockerClose();
			}
			else 
			{
				cr.PlaySound(SOUND_DOOR,  SOUND_DOOR_OPEN, locker.Proto.SoundId, locker.Proto.SoundId, true);
				locker.LockerOpen();
			}
		}
		else if(locker.GetType()==ITEM_TYPE_CONTAINER)
		{
			// NoOpen
			if(FLAG(locker.LockerCondition,LOCKER_NOOPEN))
			{
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
				return true;
			}

			// Check key
			if(!FLAG(locker.LockerCondition,LOCKER_ISOPEN) && locker.LockerId!=0 &&
				!FLAG(locker.LockerCondition,LOCKER_BROKEN) && !IsKeyAviable(cr,locker.LockerId))
			{
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_ITEM_LOCKER_NEED_KEY);
				cr.PlaySound("locklocked.ogg",true);
				return true;
			}

			// Is changeble
			if(locker.Proto.Container_Changeble)
			{
				// Change state
				if(FLAG(locker.LockerCondition,LOCKER_ISOPEN)) 
				{
					locker.LockerClose();
					cr.PlaySound("lockerclosed.ogg",true);
				}
				else
				{
					locker.LockerOpen();
					cr.PlaySound("lockeropen.ogg",true);
					cr.ShowContainer(null,locker,locker.Proto.GroundLevel?TRANSFER_HEX_CONT_DOWN:TRANSFER_HEX_CONT_UP);
				}
			}
			// No changeble
			else
			{
				cr.ShowContainer(null,locker,locker.Proto.GroundLevel?TRANSFER_HEX_CONT_DOWN:TRANSFER_HEX_CONT_UP);
			}
		}
	}
	else if(skill==SK_STEAL)
	{
		if(locker.GetType()==ITEM_TYPE_CONTAINER && FLAG(locker.LockerCondition,LOCKER_ISOPEN))
			cr.ShowContainer(null,locker,locker.Proto.GroundLevel?TRANSFER_HEX_CONT_DOWN:TRANSFER_HEX_CONT_UP);
		else
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
	}
	else if(skill==SK_LOCKPICK)
	{
		// NoOpen
		if(FLAG(locker.LockerCondition,LOCKER_NOOPEN))
		{
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
			return true;
		}

		if(cr.Timeout[TO_SK_LOCKPICK]>0)
		{
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_SKILL_WEARINESS);
			return true;
		}

		if(locker.LockerId==0 || FLAG(locker.LockerCondition,LOCKER_ISOPEN))
		{
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
			return true;
		}

		int base=cr.Skill[SK_LOCKPICK]-locker.LockerComplexity;
		uint8 mode=0;
		uint16 activePid=cr.GetSlotProto(SLOT_HAND1,mode).ProtoId;
		if(activePid==PID_LOCKPICKS)
		{
			base+=25;
			if(Random(0,30)==0) cr.DeleteItem(PID_LOCKPICKS,1);
		}
		else if(activePid==PID_EXP_LOCKPICK_SET)
		{
			base+=50;
			if(Random(0,30)==0) cr.DeleteItem(PID_EXP_LOCKPICK_SET,1);
		}
		// Todo: PID_ELECTRONIC_LOCKPICKS, PID_ELEC_LOCKPICK_MKII

		base=CLAMP(base,0,95);
		if(base>=Random(1,100))
		{
			locker.LockerOpen();
			if(locker.GetType()==ITEM_TYPE_CONTAINER) cr.ShowContainer(null,locker,locker.Proto.GroundLevel?TRANSFER_HEX_CONT_DOWN:TRANSFER_HEX_CONT_UP);
			cr.StatBase[ST_EXPERIENCE]+=50;
			cr.AddScore(SCORE_CRACKER,1);
			#ifdef FONLINE_MYSQL
			GameVar@ best_var=GetGlobalVar(GVAR_de_cracker_stat);
			int cr_var=cr.GetScore(SCORE_CRACKER);
			if(cr_var>best_var.GetValue()){
				best_var=cr_var;
				string result;
				string query="UPDATE  `fonline`.`stats` SET  `player_name` =  '"+cr.Name+"', `rekord` =  '"+cr_var+"' WHERE  `stats`.`id` =6 ";
				int r = SqlQueryti(SERVER_IP,SERVER_PORT,USER_NAME,PASSWORD,BD_NAME,query,result);
				if(r==2) Log(result);
			}
			#endif	
		}
		else
		{
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_SKILL_LOCKPICK_FAIL);
		}

		cr.TimeoutBase[TO_SK_LOCKPICK]=LOCKPICK_TIMEOUT(cr);
	}

	// Repair + SuperToolKit = removed lock
	else if(skill==SK_REPAIR)
	{
		if(cr.Timeout[TO_SK_REPAIR]>0)
		{
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_SKILL_WEARINESS);
			return true;
		}
		
		if(locker.LockerId==0)
		{
			cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
			return true;
		}

		int base=cr.Skill[SK_REPAIR]-locker.LockerComplexity;
		uint8 mode=0;
		uint16 activePid=cr.GetSlotProto(SLOT_HAND1,mode).ProtoId;
		
		if((locker.GetType()==ITEM_TYPE_CONTAINER || locker.GetType()==ITEM_TYPE_DOOR) && locker.LockerId!=0)
		{
			if(FLAG(locker.LockerCondition,LOCKER_ISOPEN) && cr.ParamBase[SK_REPAIR]>=100 && activePid==PID_SUPER_TOOL_KIT)
			{
				if(Random(0,30)==0) cr.DeleteItem(PID_SUPER_TOOL_KIT,1);
				cr.StatBase[ST_EXPERIENCE]+=100;
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,10103);
				cr.PlaySound("CARREPAR.ACM",true);	//BUTOUT3.ACM
				locker.LockerId=0;
				locker.LockerClose();
				cr.TimeoutBase[TO_SK_REPAIR]=REPAIR_TIMEOUT(cr);
			}
			if(cr.ParamBase[SK_REPAIR]<=99 || activePid!=PID_SUPER_TOOL_KIT)
			{
				//locker.LockerClose();
				if(FLAG(locker.LockerCondition,LOCKER_ISOPEN))
				{
					cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,10105);
					cr.PlaySound("locklocked.ogg",true);
					return true;
				}
				if(!FLAG(locker.LockerCondition,LOCKER_ISOPEN))
				{
					cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,10106);
					cr.PlaySound("locklocked.ogg",true);
					return true;
				}
			}
		}
		if((locker.GetType()==ITEM_TYPE_CONTAINER || locker.GetType()==ITEM_TYPE_DOOR) && locker.LockerId!=0 && !FLAG(locker.LockerCondition,LOCKER_ISOPEN))
			{
				cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,10104);
				cr.PlaySound("locklocked.ogg",true);
				return true;
			}
	}

	else if(skill==SKILL_TAKE_ALL_CONT)
	{
		return false;
	}
	else
	{
		cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
	}
	return true;
}

bool IsKeyAviable(Critter& cr, uint lockerId) // Export
{
	if(lockerId==0) return true;
	if(_CritFingersDoorId(cr.Id)==lockerId || _CritEyesDoorId(cr.Id)==lockerId) return true;
	Item@[] keys;
	for(uint i=0,j=cr.GetItemsByType(ITEM_TYPE_KEY,keys);i<j;i++) if(keys[i].LockerId==lockerId) return true;
	return false;
}

uint GetKeyId(Critter& cr, uint lockerId) // Export
{
	if(lockerId==0 || _CritFingersDoorId(cr.Id)==lockerId || _CritEyesDoorId(cr.Id)==lockerId) return 0;
	Item@[] keys;
	for(uint i=0,j=cr.GetItemsByType(ITEM_TYPE_KEY,keys);i<j;i++) if(keys[i].LockerId==lockerId) return keys[i].Id;
	return 0;
}

void SwitchState(Item& locker) // Export
{
	// Todo: show messages

	if(locker.GetType()==ITEM_TYPE_DOOR || locker.GetType()==ITEM_TYPE_CONTAINER)
	{
		// Check open aviability
		if(not FLAG(locker.LockerCondition,LOCKER_NOOPEN))
		{
			// Change state
			if(FLAG(locker.LockerCondition,LOCKER_ISOPEN))
				locker.LockerClose();
			else
				locker.LockerOpen();
		}
	}
}




















