// Скрипт для реализации диалогов между несколькими НПЦ
// 
/*

1) Криттер произносит фразу, одновременно создает план ожидания на 5..10 секунд.
По завершении плана он либо произносит следующую фразу, либо отправляет сообщение с помощью SendMessage тем, кто его видит, с value сообщения = номеру этой фразы

2) Другой криттер при получении сообщения может произнести следующую фразу, по тем же правилам, что указано в п. 1.


Атрибуты каждой фразы:
Номер произносимой фразы криттера - строка из файла FOTEXT.MSG 
Номер следующей фразы - фраза, которую нпц произнесет по истечению плана ожидания, либо номер сообщения, которое он отправит по завершению
Тип следующего действия - либо сказать следующую фразу, либо отослать сообщение

Диалог начинается, когда криттер произносит первую реплику.
Весь диалог можно описать набором реплик, каждая реплика описывается тремя параметрами


Пример: 

number   next    type

100      101     1 - сказать следующую фразу
101      102     2 - отправить сообщение
102      103     2 
103      0       0 - ничего не делать

есть два нпц: нпц1 и нпц2, которые знают описание этого диалога. Допустим, нпц1 инициирует диалог

нпц1 говорит фразу №100, добавляет Misc plan, по его окончанию проверяет тип ожидания - видит что нужно говорить следующую фразу под номером 101
нпц1 говорит фразу №101, ждет, проверяет тип - видит, что нужно отправить сообщение, он отправляет сообщение 102
нпц2 получает сообщение №102, говорит фразу 102 и добавляет план ожидания также, дальше отправляет сообщение 103
нпц1 говорит фразу #103 и диалог заканчивается
*/
#include "_macros.fos"

import bool AddMiscPlane(Critter& npc, uint priority, uint waitSecond, string@ funcName) from "npc_planes";

#define T_SaySelf  (1) // Следующую фразу НПЦ говорит сам
#define T_SendMsg  (2) // Следующую фразу должен сказать кто-то другой, НПЦ отправляет сообщение
#define T_Repeat   (0) // Последняя фраза диалога
#define T_NoAction (-1) // Последняя фраза диалога

#define StrFirst    (0) // Первая фраза диалога
#define NoNextStr   (0) // Последняя фраза диалога
#define WAIT_TIME  (10*__TimeMultiplier) // Время ожидания по умолчанию для следующей реплики

#define DialogNum  (0) // Условный номер диалога
#define TextMsg    (1) // Файл, в котором лежит реплика
#define SayType    (2) // Тип фразы (говорить, кричать итд)
#define Phrase     (3) // Произносимая фраза - у первой реплики SayPhrase = 0
#define NextPhrase (4) // Номер следующей фразы
#define PhraseType (5) // Тип действия, производимого после завершения плана ожидания
#define TableColumns (6)

//#define DL #(s) (Log("" + s))
#define DL #(s)

const int[] DialogData= 
{
// DialogNum, TextMsg,      SayType,           Phrase,     NextPhrase,  PhraseType
// Диалог№ 1 тестовый
   1,         TEXTMSG_TEXT, SAY_NORM,          StrFirst,   101,         T_SaySelf,
   1,         TEXTMSG_TEXT, SAY_NORM,          101,        102,         T_SaySelf,
   1,         TEXTMSG_TEXT, SAY_NORM,          102,        103,         T_SendMsg,
   1,         TEXTMSG_TEXT, SAY_NORM,          103,        104,         T_SaySelf,
   1,         TEXTMSG_TEXT, SAY_NORM,          104,        NoNextStr,   T_NoAction,
// диалог №2. q_hub_lab. Хономер и охранник
   2,         TEXTMSG_TEXT, SAY_NORM,          StrFirst,   8000,         T_SendMsg,
   2,         TEXTMSG_TEXT, SAY_NORM,          8000,       8001,         T_SendMsg,
   2,         TEXTMSG_TEXT, SAY_NORM,          8001,       8002,         T_SendMsg,
   2,         TEXTMSG_TEXT, SAY_NORM,          8002,       8003,         T_SendMsg,
   2,         TEXTMSG_TEXT, SAY_NORM,          8003,       NoNextStr,    T_NoAction, 
// диалог №3. q_hub_lab. Лаборанты
   3,         TEXTMSG_TEXT, SAY_NORM,          StrFirst,   8010,         T_SaySelf,
   3,         TEXTMSG_TEXT, SAY_NORM,          8010,       8011,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8011,       8012,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8012,       8013,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8013,       8014,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8014,       8015,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8015,       8016,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8016,       8017,         T_SaySelf,
   3,         TEXTMSG_TEXT, SAY_NORM,          8017,       8018,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8018,       8019,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8019,       8020,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8020,       8021,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8021,       8022,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8022,       8023,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8023,       8024,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8024,       8025,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8025,       8026,         T_SendMsg, 
   3,         TEXTMSG_TEXT, SAY_NORM,          8026,       8027,         T_SendMsg,
   3,         TEXTMSG_TEXT, SAY_NORM,          8027,       8028,         T_SendMsg, 
   3,         TEXTMSG_TEXT, SAY_NORM,          8028,       NoNextStr,    T_NoAction,
// диалог №4. q_hub_lab. Реплики Хономера
   4,         TEXTMSG_TEXT, SAY_NORM,          StrFirst,   8029,         T_SaySelf,
   4,         TEXTMSG_TEXT, SAY_NORM,          8029,       StrFirst,     T_SaySelf,
// диалог №5. vcity_common. Диалог двух посетителей бара
   5,         TEXTMSG_TEXT, SAY_NORM,          StrFirst,   8032,         T_SaySelf,
   5,         TEXTMSG_TEXT, SAY_NORM,          8032,       8033,         T_SendMsg,
   5,         TEXTMSG_TEXT, SAY_NORM,          8033,       8034,         T_SendMsg, 
   5,         TEXTMSG_TEXT, SAY_NORM,          8034,       8035,         T_SendMsg, 
   5,         TEXTMSG_TEXT, SAY_NORM,          8035,       8036,         T_SendMsg,
   5,         TEXTMSG_TEXT, SAY_NORM,          8036,       8037,         T_SendMsg,
   5,         TEXTMSG_TEXT, SAY_NORM,          8037,       StrFirst,    T_NoAction,    
};

#define D_Dialog #(phrase)     (DialogData[phrase*TableColumns])
#define D_SayType #(phrase)    (DialogData[phrase*TableColumns + SayType])
#define D_TextMsg #(phrase)    (DialogData[phrase*TableColumns + TextMsg])
#define D_SayPhrase #(phrase)  (DialogData[phrase*TableColumns + Phrase])
#define D_NextPhrase #(phrase) (DialogData[phrase*TableColumns + NextPhrase])
#define D_PhraseType #(phrase) (DialogData[phrase*TableColumns + PhraseType])

#define MSG_DIALOG    (4022)
#define MSG_DIALOG_END(4023)

void BeginDialog(Critter& cr, int dialog)
{
	SayPhrase(cr, dialog, StrFirst);
}

// Получает индекс нужной фразы в таблице
int GetPhrase (int dialog, int phrase)
{
	uint[] phrases; // Фраз с одинаковым назначением может быть несколько
	for(uint i=0, l=DialogData.length(); i < l; i+=TableColumns)
		if(DialogData[i] == dialog && DialogData[i+Phrase] == phrase)
			phrases.insertLast(i/TableColumns);
	if(phrases.length() == 0)
		return -1;
	return phrases[Random(0, phrases.length()-1)];
}

// Произнесение фразы криттером
// cr - говорящий криттер
// dialog - порядковый номер диалога в таблице
// num - номер строки
void SayPhrase(Critter& cr, int dialog, int num)
{
	DL("SayPhrase called");
	int r = GetPhrase(dialog, num);
	DL("r=" + r);
	cr.SayMsg(D_SayType(r), D_TextMsg(r), num);
	cr.StatBase[ST_VAR8] = r; // Номер строки сохраняется в переменные криттера
	AddMiscPlane(cr, 0, __FullSecond+WAIT_TIME, "npc_dialog@plane_NextPhrase");	
}

bool DialogEnded(Critter& cr)
{
	return D_PhraseType(cr.Stat[ST_VAR8]) == T_NoAction;
}

void plane_NextPhrase(Critter& cr)
{
	DL("plane_NextPhrase called. CrittedId:"+cr.Id +" type" + D_PhraseType(cr.Stat[ST_VAR8]));
	if(D_PhraseType(cr.Stat[ST_VAR8]) == T_NoAction)
	{		
		cr.SendMessage(MSG_DIALOG_END, D_Dialog(cr.Stat[ST_VAR8]), MESSAGE_TO_ALL_ON_MAP);	
		return;
	}
	if(D_PhraseType(cr.Stat[ST_VAR8]) == T_SaySelf)
		SayPhrase(cr, D_Dialog(cr.Stat[ST_VAR8]), D_NextPhrase(cr.Stat[ST_VAR8]));
	else 
		if(D_PhraseType(cr.Stat[ST_VAR8]) == T_SendMsg)
			cr.SendMessage(MSG_DIALOG, D_Dialog(cr.Stat[ST_VAR8]), MESSAGE_TO_WHO_SEES_ME);	
}

void _NpcMessage(Critter& cr, Critter& fromCr, int message, int value)
{
	if(message == MSG_DIALOG && fromCr.Id != cr.Id)
	{
		DL("message rcvd. Cr" + cr.Id + " from " + fromCr.Id + " row " + fromCr.Stat[ST_VAR8] + " next" + D_NextPhrase(fromCr.Stat[ST_VAR8]));
		SayPhrase(cr, value, D_NextPhrase(fromCr.Stat[ST_VAR8]));
	}
}