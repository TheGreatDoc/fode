#include "_client_defines.fos"
#include "client_gui_h.fos"
#include "_colors.fos"
#include "_macros.fos"
#include "_msgstr.fos"

import void AttachTabsToScreen(int screen) from "client_scripts";
import void UpdatePipBoyPosition(int x, int y) from "client_scripts";
import void GetPipBoyPosition(int &x, int &y) from "client_scripts";
import int[]@ GetIniValues2(string& iniKey, int[]@ defaultValues) from "ini_parser";
import int[]@ GetIniValues4(string& iniKey, int[]@ defaultValues) from "ini_parser";

int[] positions;

IGUIElementImageOpt@[] switchReceptionMode;
IGUIElementImageOpt@[] switchBroadcastMode;
IGUIElementCheckBoxOpt @swidchReceptionState;
IGUIElementCheckBoxOpt @swidchBroadcastState;
IGUIElementSliderControlOpt @channelSlidder;
IGUIElementTextOpt @NoRadioTextOpt;
ScreenMain@ screenMain;

class ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackMove
{
	int RadioId;
	int RadioChannel;
	int RadioBroadcastSend;
	int RadioBroadcastRecv;
	int RadioFlags;

	int BroadcastSendType;
	int BroadcastRecvType;

	ScreenMain()
	{
		RadioId=0;
		RadioChannel=0;
		RadioBroadcastSend=0;
		RadioBroadcastRecv=0;
		RadioFlags=0;
	}
	
	void OnShow(int radioId, int radioChannel, int radioData)
	{
		// Store data
		if(radioId==-1)
		{
			RadioId=0;
			NoRadioTextOpt.setVisible(true);
		}
		else
		{
			RadioId=radioId;
			NoRadioTextOpt.setVisible(false);
		}
		if(radioChannel!=-1)
		{
			RadioChannel=radioChannel;
			RadioBroadcastSend=(radioData>>16)&0xFF;
			RadioBroadcastRecv=(radioData>>24)&0xFF;
			RadioFlags=radioData&0xFFFF;
		}

		// Set actual GUI states
		channelSlidder.Pos(RadioChannel);

		swidchBroadcastState.setState(not FLAG(RadioFlags,RADIO_DISABLE_SEND));
		swidchReceptionState.setState(not FLAG(RadioFlags,RADIO_DISABLE_RECV));

		BroadcastSendType=0;
		if(RadioBroadcastSend==RADIO_BROADCAST_WORLD) BroadcastSendType=1;
		else if(RadioBroadcastSend==RADIO_BROADCAST_ZONE(5)) BroadcastSendType=2;
		else if(RadioBroadcastSend==RADIO_BROADCAST_ZONE(2)) BroadcastSendType=3;
		else if(RadioBroadcastSend==RADIO_BROADCAST_LOCATION) BroadcastSendType=4;
		else if(RadioBroadcastSend==RADIO_BROADCAST_MAP) BroadcastSendType=5;

		for(uint i=0;i<switchBroadcastMode.length();i++) switchBroadcastMode[i].Visible(false);
		if(BroadcastSendType!=0) switchBroadcastMode[BroadcastSendType-1].Visible(true);

		BroadcastRecvType=0;
		if(RadioBroadcastRecv==RADIO_BROADCAST_WORLD) BroadcastRecvType=1;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_ZONE(5)) BroadcastRecvType=2;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_ZONE(2)) BroadcastRecvType=3;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_LOCATION) BroadcastRecvType=4;
		else if(RadioBroadcastRecv==RADIO_BROADCAST_MAP) BroadcastRecvType=5;
		for(uint i=0;i<switchReceptionMode.length();i++) switchReceptionMode[i].Visible(false);
		if(BroadcastRecvType!=0) switchReceptionMode[BroadcastRecvType-1].Visible(true);
		
		int x=0,y=0;
		GetPipBoyPosition(x,y);
		SetScreenPos(CLIENT_SCREEN_RADIO,x,y);
	}
	
	void OnMove(int x, int y)
	{
		UpdatePipBoyPosition(x,y);
	}

	void ChangeChannel(int channel)
	{
		if(RadioChannel==channel) return;
		RadioChannel=channel;
		RunServerScriptUnsafe("radio@unsafe_ChangeChannel",RadioId,RadioChannel,0,null,null);
	}

	void ChangeActivity(bool isSend)
	{
		int shiftFlag=(isSend?RADIO_DISABLE_SHIFT_SEND:RADIO_DISABLE_SHIFT_RECV);
		int disabledFlag=(isSend?RADIO_DISABLE_SEND:RADIO_DISABLE_RECV);
		uint cantShiftStr=(isSend?STR_RADIO_CANT_SHIFT_SEND:STR_RADIO_CANT_SHIFT_RECV);
		uint beginStr=(isSend?STR_RADIO_BROADCAST_SEND_BEGIN:STR_RADIO_BROADCAST_RECV_BEGIN);
		uint endStr=(isSend?STR_RADIO_BROADCAST_SEND_END:STR_RADIO_BROADCAST_RECV_END);

		if(not FLAG(RadioFlags,shiftFlag))
		{
			RadioFlags^=disabledFlag;
			RunServerScriptUnsafe("radio@unsafe_ChangeActivity",RadioId,isSend?1:0,0,null,null);

			if(not FLAG(RadioFlags,disabledFlag))
				Message(TEXTMSG_GAME,beginStr);
			else
				Message(TEXTMSG_GAME,endStr);
		}
		else
		{
			Message(TEXTMSG_GAME,cantShiftStr);
		}

		if(isSend)
			swidchBroadcastState.setState(not FLAG(RadioFlags,disabledFlag));
		else
			swidchReceptionState.setState(not FLAG(RadioFlags,disabledFlag));
	}

	void ChangeBroadcast(bool isSend, int type)
	{
		int shiftFlag=(isSend?RADIO_DISABLE_SHIFT_BC_SEND:RADIO_DISABLE_SHIFT_BC_RECV);
		uint cantShiftStr=(isSend?STR_RADIO_CANT_SHIFT_BC_SEND:STR_RADIO_CANT_SHIFT_BC_RECV);
		uint changeStr=(isSend?STR_RADIO_BROADCAST_SEND_CHANGE:STR_RADIO_BROADCAST_RECV_CHANGE);

		if((RadioFlags&shiftFlag)!=0)
		{
			Message(TEXTMSG_GAME,cantShiftStr);
			return;
		}

		if(isSend)
			BroadcastSendType=type;
		else
			BroadcastRecvType=type;

		int newBroadcastSend=RADIO_BROADCAST_WORLD;
		if(BroadcastSendType==2) newBroadcastSend=RADIO_BROADCAST_ZONE(5);
		else if(BroadcastSendType==3) newBroadcastSend=RADIO_BROADCAST_ZONE(2);
		else if(BroadcastSendType==4) newBroadcastSend=RADIO_BROADCAST_LOCATION;
		else if(BroadcastSendType==5) newBroadcastSend=RADIO_BROADCAST_MAP;
		else BroadcastSendType=1;
		int newBroadcastRecv=RADIO_BROADCAST_WORLD;
		if(BroadcastRecvType==2) newBroadcastRecv=RADIO_BROADCAST_ZONE(5);
		else if(BroadcastRecvType==3) newBroadcastRecv=RADIO_BROADCAST_ZONE(2);
		else if(BroadcastRecvType==4) newBroadcastRecv=RADIO_BROADCAST_LOCATION;
		else if(BroadcastRecvType==5) newBroadcastRecv=RADIO_BROADCAST_MAP;
		else BroadcastRecvType=1;

		if(RadioBroadcastSend==newBroadcastSend && RadioBroadcastRecv==newBroadcastRecv) return;

		RadioBroadcastSend=newBroadcastSend;
		RadioBroadcastRecv=newBroadcastRecv;
		RunServerScriptUnsafe("radio@unsafe_ChangeBroadcast",RadioId,RadioBroadcastSend,RadioBroadcastRecv,null,null);
		Message(TEXTMSG_GAME,changeStr);

		for(uint i=0;i<switchBroadcastMode.length();i++) switchBroadcastMode[i].Visible(false);
		switchBroadcastMode[BroadcastSendType-1].Visible(true);
		for(uint i=0;i<switchReceptionMode.length();i++) switchReceptionMode[i].Visible(false);
		switchReceptionMode[BroadcastRecvType-1].Visible(true);
	}
}

class RadioSlidderControl : IGUIElementCallbackValueChange
{
	RadioSlidderControl(IGUIElementTextOpt@ tekst)
	{
		@ChannelText = tekst;
		if(@ChannelText != null) ChannelText.setText("00");
	}

	void OnValueChange(int newValue)
	{
		if(@ChannelText != null)
		{
			string nV = "" + newValue;
			if(nV.length()<2) nV = "0" + nV;
			ChannelText.setText(nV);
		}

		screenMain.ChangeChannel(newValue);
	}


	IGUIElementTextOpt@ ChannelText;
}

class OptionText : IGUIElementCallbackMouseClick
{
	int id;
	bool isReceptionMode;
	
	OptionText(int id, bool isReceptionMode)
	{
		this.id=id;
		this.isReceptionMode = isReceptionMode;
	}

	void OnMouseClick(int mm, int click)
	{
		screenMain.ChangeBroadcast(not isReceptionMode, id+1);
	}
}

class SoundSwitch : IGUIElementCallbackStateChange, IGUIElementCallbackMouseClick
{
	IGUIElementCheckBoxOpt@ indicatorLight;
	bool isBroadcast;

	SoundSwitch(IGUIElementCheckBoxOpt@ iL, bool isBroadcast)
	{
		@indicatorLight=iL;
		this.isBroadcast = isBroadcast;
	}

	void OnStateChange(bool state)
	{
		if(@indicatorLight != null) indicatorLight.setState(state);
	}

	void OnMouseClick(int mm, int click)
	{
		if(@screenMain != null) screenMain.ChangeActivity(isBroadcast);
	}
}

void InitRadioScreen()
{
	@screenMain = ScreenMain();
	
    GUI_CreateScreen(CLIENT_SCREEN_RADIO,"radio.png")
                .CanMove(true)
                .Modal(false)
				.AutoCursor(true, CURSOR_DEFAULT)
				.CallbackShow(screenMain)
				.CallbackMove(screenMain);
	
	positions=GetIniValues4("RadioGameText3000000015",null);
	GUI_AddText(CLIENT_SCREEN_RADIO,GetMsgStr(TEXTMSG_GAME,3000000015), positions[0], positions[1])
	  .TextOptions(FONT_SPECIAL, COLOR_LGRAY, FT_BORDERED|FT_CENTERX)
      .TextBoxSize(positions[2]-positions[0],positions[3]-positions[1]);
	
	positions=GetIniValues4("NoRadioTextOpt",null);
	@NoRadioTextOpt=
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.Text("!!! NO RADIO DETECTED !!!")
		.TextOptions(FONT_BIG,COLOR_RED,FT_BORDERED|FT_CENTERX)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1]);
	
	switchReceptionMode.resize(5);
	switchBroadcastMode.resize(5);

	AddTexts();
	positions=GetIniValues2("RadioIsReception",null);
	AddModeChoserSwitch(positions[0],positions[1],true);
	positions=GetIniValues2("RadioIsNotReception",null);
	AddModeChoserSwitch(positions[0],positions[1],false);

	positions=GetIniValues4("RadioChannelTextOpt",null);
	IGUIElementTextOpt@ ChannelText = GUI_AddText(CLIENT_SCREEN_RADIO)
		.Text("999")
		.TextOptions(FONT_BIG_NUM, COLOR_LGRAY)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1])
		.Position(positions[0],positions[1]);

	RadioSlidderControl sliderControl(ChannelText);
	positions=GetIniValues4("RadioChannelSlidder",null);
	@channelSlidder = GUI_AddSlidderControl(CLIENT_SCREEN_RADIO, 0, 0)
		.CallbackValueChange(sliderControl)
		.ElementBoxSize(positions[2]-positions[0],positions[3]-positions[1])
		.ElementBoxPosition(positions[0],positions[1])
		.TickTrackPic("skala.png")
		.TickTrackPosition(0,0)
		.TicTrackWidth(290)
		.TicPic("suwak4.png")
		.ActiveTicPic("suwak4.png")
		.TicZeroPosition(0,0)
		.Range(0,999)
		.TicFreq(1);
	
	IGUIElementCheckBoxOpt @receptionIndicatorLight;
	IGUIElementCheckBoxOpt @broadcastIndicatorLight;
	
	positions=GetIniValues2("RadioReceptionIndicatorLight",null);
	@receptionIndicatorLight = GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.AutoStateChange(false)
		.CheckedPic("MICON.png")
		.UnCheckedPic("MICOFF.png");

	positions=GetIniValues2("RadioBroadcastIndicatorLight",null);
	@broadcastIndicatorLight = GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.AutoStateChange(false)
		.CheckedPic("MICON.png")
		.UnCheckedPic("MICOFF.png");

	SoundSwitch receptionSoundSwitch(receptionIndicatorLight, false);
	positions=GetIniValues2("RadioSwidchReceptionState",null);
	@swidchReceptionState = GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
		.CallbackStateChange(receptionSoundSwitch)
		.CallbackMouseClick(receptionSoundSwitch)
		.CheckedPic("menudown2.png")
		.UnCheckedPic("menuup.png")
		.Position(positions[0],positions[1]);
		
	SoundSwitch broadcastSoundSwitch(broadcastIndicatorLight, true);
	positions=GetIniValues2("RadioSwidchBroadcastState",null);
	@swidchBroadcastState = GUI_AddCheckBox(CLIENT_SCREEN_RADIO)
		.CallbackStateChange(broadcastSoundSwitch)
		.CallbackMouseClick(broadcastSoundSwitch)
		.Position(positions[0],positions[1])
		.CheckedPic("menudown2.png")
		.UnCheckedPic("menuup.png");
	
	AttachTabsToScreen(CLIENT_SCREEN_RADIO);
}

void AddTexts()
{
	positions=GetIniValues4("RadioTextChannel",null);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Text("Channel:")
		.TextOptions(FONT_FAT,COLOR_DWHITE,FT_NOBREAK)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1])
		.Position(positions[0],positions[1]);
		
	positions=GetIniValues4("RadioTextOn",null);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.Text("ON")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1]);

	positions=GetIniValues4("RadioTextOff",null);	
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.Text("OFF")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1]);
	
	positions=GetIniValues4("RadioTextOn2",null);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.Text("ON")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1]);

	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Position(positions[0],positions[1])
		.Text("OFF")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(positions[2]-positions[0],positions[3]-positions[1]);
}

void AddModeChoserSwitch(int posx, int posy, bool isReception)
{
	string titleText="";
	if(isReception) titleText = "Reception";
	else titleText = "Broadcast";

	GUI_AddText(CLIENT_SCREEN_RADIO)
		.Text(titleText)
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(85, 20)
		.Position(posx + 69, posy - 20);

	OptionText everywhereReception(0, isReception);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.CallbackMouseClick(everywhereReception)
		.Text("Everywhe.")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(72, 10)
		.Position(posx + 13, posy + 38);

	OptionText zones10Reception(1, isReception);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.CallbackMouseClick(zones10Reception)
		.Text("10 Zones")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(70, 10)
		.Position(posx + 25, posy + 21);

	OptionText zones5Reception(2, isReception);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.CallbackMouseClick(zones5Reception)
		.Text("5 Zones")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(50, 10)
		.Position(posx + 69, posy + 4);

	OptionText mapReception(3, isReception);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.CallbackMouseClick(mapReception)
		.Text("Map")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(50, 10)
		.Position(posx + 125, posy + 21);

	OptionText locReception(4, isReception);
	GUI_AddText(CLIENT_SCREEN_RADIO)
		.CallbackMouseClick(locReception)
		.Text("Loc.")
		.TextOptions(FONT_SPECIAL, COLOR_DWHITE)
		.TextBoxSize(50, 10)
		.Position(posx + 127, posy + 38);

	for(uint i=0; i<switchReceptionMode.length(); i++)
	{
		if(isReception)
		{
			@switchReceptionMode[i] = GUI_AddImage(CLIENT_SCREEN_RADIO, "p"+(i)+".png", PT_ART_INTRFACE, posx + 80, posy + 16);
			switchReceptionMode[i].setVisible(false);
		}
		else 
		{
			@switchBroadcastMode[i] = GUI_AddImage(CLIENT_SCREEN_RADIO, "p"+(i)+".png", PT_ART_INTRFACE, posx + 80, posy + 16);
			switchBroadcastMode[i].setVisible(false);
		}
	}
}

void ShowEditScreen(int itemId, int, int, string@, int[]@)
{
	CritterCl@ chosen=GetChosen();
	if(not valid(chosen)) return;

	ItemCl@[] items;
	uint count=chosen.GetItems(-1,items);
	for(uint i=0,j=items.length();i<j;i++)
	{
		ItemCl@ item=items[i];
		if(item.Id==uint(itemId)) ShowScreen(CLIENT_SCREEN_RADIO,item.Id,item.RadioChannel,
			(item.RadioBroadcastRecv<<24)|(item.RadioBroadcastSend<<16)|(item.RadioFlags));
	}
}