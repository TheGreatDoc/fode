// Author: cvet
#include "_macros.fos"
#include "entire.fos"
#include "_msgstr.fos"
#include "_itempid.fos"
#include "cartype.fos"
#include "utils_for_array.fos"

import uint GetCarCost( uint16 protoCar ) from "car";

// РЎРј. РґРёР°Р»РѕРі 739 nr_t-ray

#define FD_NO_MONEY                ( 5 )
#define FD_NO_PLACES               ( 6 )
#define FD_BUY_SUCCESS_WORKSHOP    ( 7 )
#define FD_BUY_SUCCESS_CARSTOP     ( 8 )
#define FD_MODIFY_NO_MONEY         ( 37 )
#define FD_MODIFY_NO_NEED          ( 38 )
#define FD_GENERIC_ERROR           ( 100 )
#define FD_TAKE_KEY_IN_HAND        ( 101 )
#define FD_CAR_NOT_FOUND           ( 102 )
#define FD_TAKE_KEY_IN_HAND2       ( 103 )

#define STR_BUY_LIST               ( 2100 )
#define STR_COST_HUMMER            ( 2101 )
#define STR_COST_BUGGY             ( 2102 )
#define STR_COST_SCOUT             ( 2103 )
#define STR_COST_HIGHWAYMAN        ( 2104 )

#define ENTIRE_WORKSHOP            ( 100 )

#define KEY_COPY_COST              ( 1000 )
#define KEY_COPY_COST_II           ( 750 )


int GetFuelCost( Item@ car )
{
    return (int(car.Proto.Car_TankVolume) - car.Charge) / 10;
}

int GetWearCost( Item@ car )
{
    return car.Deterioration + 10;
}

int GetBioCost( Item@ car )
{
    return GetCarCost( car.GetProtoId() ) * 10 / 50;
}

int GetEnergyCost( Item@ car )
{
    return GetCarCost( car.GetProtoId() ) * 10 / 30;
}

void dlg_PrepareBuy( Critter& player, Critter@ tray, string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return;

    lexems += "$hummer" + GetCarCost( PID_HUMMER );
    lexems += "$buggy" + GetCarCost( PID_BUGGY );
    lexems += "$scout" + GetCarCost( PID_SCOUT );
    lexems += "$highwayman" + GetCarCost( PID_HIGHWAYMAN );
	lexems += "$truck" + GetCarCost( PID_AUTO4 );
	lexems += "$hunchback" + GetCarCost( PID_AUTO7 );
	lexems += "$toddler" + GetCarCost( PID_AUTO13 );
	lexems += "$motorbike" + GetCarCost( PID_MOTORBIKE3 );
	lexems += "$motorbike_car" + GetCarCost( PID_MOTORBIKE4 );
	lexems += "$cruiser" + GetCarCost( PID_AUTO19 );
	
}

uint r_BuyHummer( Critter& player, Critter@ tray, int val )
{
    return TryCreateCar( player, PID_HUMMER );
}

uint r_BuyBuggy( Critter& player, Critter@ tray, int val )
{
    return TryCreateCar( player, PID_BUGGY );
}

uint r_BuyScout( Critter& player, Critter@ tray, int val )
{
    return TryCreateCar( player, PID_SCOUT );
}

uint r_BuyHighwayman( Critter& player, Critter@ tray, int val )
{
    return TryCreateCar( player, HIGHWAYMAN[Random(0,HIGHWAYMAN.length()-1)]);
}

uint r_BuyTruck( Critter& player, Critter@ tray, int val )
{
	return TryCreateCar( player, TRUCK[Random(0,TRUCK.length()-1)]);
}

uint r_BuyHunchback( Critter& player, Critter@ tray, int val )
{
	return TryCreateCar( player, HUNCHBACK[Random(0,HUNCHBACK.length()-1)]); 
}

uint r_BuyToddler( Critter& player, Critter@ tray, int val )
{
	return TryCreateCar( player, TODDLER[Random(0,TODDLER.length()-1)]); 
}

uint r_BuyCruiser( Critter& player, Critter@ tray, int val )
{
	return TryCreateCar( player, CRUISER[Random(0,CRUISER.length()-1)]); 
}

uint r_BuyMotorbike( Critter& player, Critter@ tray, int val )
{
	return TryCreateCar( player, MOTORBIKE[Random(0,MOTORBIKE.length()-1)]); 
}

uint r_BuyMotorbike_car( Critter& player, Critter@ tray, int val )
{
	return TryCreateCar( player, MOTORBIKE_CAR[Random(0,MOTORBIKE_CAR.length()-1)]); 
}


uint TryCreateCar( Critter& player, uint16 protoCar )
{
    if( protoCar != PID_HUMMER && protoCar != PID_BUGGY && protoCar != PID_SCOUT && FindInArray(HIGHWAYMAN,protoCar)==-1 && FindInArray(TRUCK,protoCar)==-1 && FindInArray(HUNCHBACK,protoCar)==-1 && FindInArray(TODDLER,protoCar)==-1 && FindInArray(CRUISER,protoCar)==-1 && FindInArray(MOTORBIKE,protoCar)==-1 && FindInArray(MOTORBIKE_CAR,protoCar)==-1 )
        return FD_GENERIC_ERROR;

    uint cost = GetCarCost( protoCar );
    if( _CritCountItem( player, PID_BOTTLE_CAPS ) < cost )
        return FD_NO_MONEY;

    Map@ map = player.GetMap();
    if( not valid( map ) )
        return FD_GENERIC_ERROR;

    Entire[] entires;
    ParseEntires( map, entires, ENTIRE_WORKSHOP );
    ParseEntires( map, entires, ENTIRE_CAR );

    uint16 hx, hy, entNum;
    for( int i = 0, j = entires.length(); i <= j; i++ )
    {
        if( i == j )
            return FD_NO_PLACES;

        Entire@ ent = entires[ i ];
        if( map.CheckPlaceForItem( ent.HexX, ent.HexY, protoCar ) )
        {
            hx = ent.HexX;
            hy = ent.HexY;
            entNum = ent.Number;
            break;
        }
    }

    uint  keyId = Random( 100000, 500000 );

    Item@ car = map.AddItem( hx, hy, protoCar, 1 );
    if( not valid( car ) )
        return FD_GENERIC_ERROR;
    car.LockerId = keyId;
    car.Charge = car.Proto.Car_TankVolume;
    car.Deterioration = 0;
    car.Update();

    Item@ bag = car.GetChild( 0 );
    if( valid( bag ) )
    {
        bag.LockerId = keyId;
        bag.LockerComplexity = Random( 150, 250 );
        bag.Update();
    }

    Item@ key = player.AddItem( PID_KEY, 1 );
    if( valid( key ) )
    {
        key.LockerId = keyId;
        key.Update();
    }

    player.DeleteItem( PID_BOTTLE_CAPS, cost );
    if( entNum == ENTIRE_WORKSHOP )
        return FD_BUY_SUCCESS_WORKSHOP;

    return FD_BUY_SUCCESS_CARSTOP;
}

Item@ GetPlayerKey( Critter@ player )
{
    Item@ key = _CritGetItemHand( player );
    if( not valid( key ) || key.GetType() != ITEM_TYPE_KEY )
        return null;
    return key;
}

Item@ GetPlayerCar( Critter@ player, uint& forceDialog )
{
    Map@ map = player.GetMap();
    if( not valid( map ) )
    {
        forceDialog = FD_GENERIC_ERROR;
        return null;
    }

    Item@ key = GetPlayerKey( player );
    if( not valid( key ) )
    {
        forceDialog = FD_TAKE_KEY_IN_HAND;
        return null;
    }

    Entire[] entires;
    ParseEntires( map, entires, ENTIRE_WORKSHOP );
    ParseEntires( map, entires, ENTIRE_CAR );
    ParseEntires( map, entires, ENTIRE_MOTORBIKE );
    for( int i = 0, j = entires.length(); i < j; i++ )
    {
        Item@ car = map.GetCar( entires[ i ].HexX, entires[ i ].HexY );
        if( valid( car ) && car.LockerId == key.LockerId )
            return car;
    }

    forceDialog = FD_CAR_NOT_FOUND;
    return null;
}

uint r_CheckCar( Critter& player, Critter@ tray, int val )
{
    uint forceDialog = 0;
    if( not valid( GetPlayerCar( player, forceDialog ) ) )
        return forceDialog;
    return 0;
}

uint dlg_SellCar( Critter& player, Critter@ tray, string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return 0;
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        lexems = "$sell_cost0";
    else
    {
        uint     cost = GetCarCost( car.GetProtoId() ) / 2;
        GameVar@ isQuest = GetLocalVar( LIVAR_is_quest_item, car.Id );
        if( valid( isQuest ) && isQuest == 1 )
            cost = 0;
        lexems = "$sell_cost" + cost;
    }

    return forceDialog;
}

uint r_SellCar( Critter& player, Critter@ tray, int val )
{
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        return forceDialog;
    uint     cost = GetCarCost( car.GetProtoId() ) / 2;
    GameVar@ isQuest = GetLocalVar( LIVAR_is_quest_item, car.Id );
    if( valid( isQuest ) && isQuest == 1 )
        cost = 0;
    Item@ key = _CritGetItemHand( player );
    if( valid( key ) && key.GetType() == ITEM_TYPE_KEY && key.LockerId == car.LockerId )
        DeleteItem( key );
    DeleteItem( car );
    player.AddItem( PID_BOTTLE_CAPS, cost );
    return 0;
}

uint dlg_Fuel( Critter& player, Critter@ tray, string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return 0;
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        lexems = "$fuel_cost0";
    else
        lexems = "$fuel_cost" + GetFuelCost( car );
    return forceDialog;
}

uint dlg_Wear( Critter& player, Critter@ tray, string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return 0;
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        lexems = "$wear_cost0";
    else
        lexems = "$wear_cost" + GetWearCost( car );
    return forceDialog;
}

uint dlg_Bio( Critter& player, Critter@ tray, string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return 0;
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        lexems = "$bio_cost0";
    else
        lexems = "$bio_cost" + GetBioCost( car );
    return forceDialog;
}

uint dlg_Energy( Critter& player, Critter@ tray, string@ lexems )
{
    if( not IS_DIALOG_GENERATED( lexems ) )
        return 0;
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        lexems = "$energy_cost0";
    else
        lexems = "$energy_cost" + GetEnergyCost( car );
    return forceDialog;
}

uint r_DoFuel( Critter& player, Critter@ tray, int val )
{
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        return forceDialog;

    uint cost = GetFuelCost( car );
    uint money = player.CountItem( PID_BOTTLE_CAPS );
    if( cost > money )
        return FD_MODIFY_NO_MONEY;

    if( car.Charge >= car.Proto.Car_TankVolume )
        return FD_MODIFY_NO_NEED;
    car.Charge = car.Proto.Car_TankVolume;
    player.DeleteItem( PID_BOTTLE_CAPS, cost );
    return 0;
}

uint r_DoWear( Critter& player, Critter@ tray, int val )
{
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        return forceDialog;

    uint cost = GetWearCost( car );
    uint money = player.CountItem( PID_BOTTLE_CAPS );
    if( cost > money )
        return FD_MODIFY_NO_MONEY;

    if( car.Deterioration == 0 )
        return FD_MODIFY_NO_NEED;
    car.Deterioration = 0;
    player.DeleteItem( PID_BOTTLE_CAPS, cost );
    return 0;
}

uint r_DoBio( Critter& player, Critter@ tray, int val )
{
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        return forceDialog;

    uint cost = GetBioCost( car );
    uint money = player.CountItem( PID_BOTTLE_CAPS );
    if( cost > money )
        return FD_MODIFY_NO_MONEY;

    if( _CarIsBioEngine( car ) )
        return FD_MODIFY_NO_NEED;
    _CarSetBioEngine( car );
    player.DeleteItem( PID_BOTTLE_CAPS, cost );
    return 0;
}

uint r_DoEnergy( Critter& player, Critter@ tray, int val )
{
    uint  forceDialog = 0;
    Item@ car = GetPlayerCar( player, forceDialog );
    if( not valid( car ) )
        return forceDialog;

    uint cost = GetEnergyCost( car );
    uint money = player.CountItem( PID_BOTTLE_CAPS );
    if( cost > money )
        return FD_MODIFY_NO_MONEY;

    if( _CarIsEnergyEngine( car ) )
        return FD_MODIFY_NO_NEED;
    _CarSetEnergyEngine( car );
    player.DeleteItem( PID_BOTTLE_CAPS, cost );
	player.DeleteItem(PID_CAR_ENERGY_CELL_CONTROLLER,1);
    return 0;
}

uint r_CopyKey( Critter& player, Critter@ tray, int val )
{
    uint money = player.CountItem( PID_BOTTLE_CAPS );
    if( money < KEY_COPY_COST )
        return FD_MODIFY_NO_MONEY;

    Item@ key = GetPlayerKey( player );
    if( not valid( key ) )
        return FD_TAKE_KEY_IN_HAND2;

    Item@ keyCopy = player.AddItem( PID_KEY, 1 );
    if( not valid( keyCopy ) )
        return FD_GENERIC_ERROR;
    keyCopy.LockerId = key.LockerId;
    keyCopy.Update();

    player.DeleteItem( PID_BOTTLE_CAPS, KEY_COPY_COST );
    return 0;
}

uint r_CopyKey_II( Critter& player, Critter@ tray, int val )
{
    uint money = player.CountItem( PID_BOTTLE_CAPS );
    if( money < KEY_COPY_COST_II )
        return FD_MODIFY_NO_MONEY;

    Item@ key = GetPlayerKey( player );
    if( not valid( key ) )
        return FD_TAKE_KEY_IN_HAND2;

    Item@ keyCopy = player.AddItem( PID_KEY, 1 );
    if( not valid( keyCopy ) )
        return FD_GENERIC_ERROR;
    keyCopy.LockerId = key.LockerId;
    keyCopy.Update();

    player.DeleteItem( PID_BOTTLE_CAPS, KEY_COPY_COST_II );
    return 0;
}